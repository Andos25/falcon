{
  "name": "zerorpc",
  "version": "0.9.3",
  "main": "./index.js",
  "author": {
    "name": "dotCloud",
    "email": "opensource@dotcloud.com"
  },
  "description": "A port of ZeroRPC to node.js",
  "contributors": [
    {
      "name": "Francois-Xavier Bourlet",
      "email": "fx@dotcloud.com"
    },
    {
      "name": "Yusuf Simonson",
      "email": "yusuf@dotcloud.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/dotcloud/zerorpc-node"
  },
  "keywords": [
    "zerorpc",
    "rpc",
    "distributed",
    "communication"
  ],
  "dependencies": {
    "underscore": "1.3.3",
    "msgpack": "0.1.8",
    "node-uuid": "1.3.3",
    "zmq": "2.x"
  },
  "devDependencies": {
    "nodeunit": "0.7.4"
  },
  "license": "MIT",
  "readme": "zerorpc-node\n============\n\nZeroRPC is a communication layer for distributed systems. zerorpc-node is a port of the original [ZeroRPC](https://github.com/dotcloud/zerorpc-python) for node.js. We have full client and server support for version 3 of the protocol, and clients/servers written in the Python version can communicate transparently with those written in node.js. This project is alpha.\n\nTo install the package:\n\n    npm install zerorpc\n\nIf you get the error `Package libzmq was not found`, take a look at [the fix for zeromq.node](https://github.com/JustinTulloss/zeromq.node/issues/55). If you get the error `Unable to load shared library <<path to zeromq.node>>/binding.node`, [make sure you run ldconfig](https://github.com/JustinTulloss/zeromq.node/issues/85). If that still doesn't work, check out [this ticket](https://github.com/JustinTulloss/zeromq.node/issues/92).\n\nServers\n-------\n\nTo create a new server:\n\n    var zerorpc = require(\"zerorpc\");\n    var server = new zerorpc.Server(context);\n\nThe constructor takes in a context object with the functions to expose over RPC. Only functions that do not have a leading underscore will be exposed. Each exposed method must take in a callback as the last argument. This callback is called as `callback(error, response, more)` when there is a new update, where error is an error object or string, response is the new update, and more is a boolean specifying whether new updates will be available later. `error`, `response`, and `more` default to falsy values, so e.g. simply calling `callback()` closes an open stream, since `more` is false by default.\n\nEvents:\n\n* `error` - When an error occurs.\n\nMethods:\n\n* `bind(endpoint)` - Binds the server to the specified ZeroMQ endpoint.\n* `connect(endpoint)` - Connects the server to the specified ZeroMQ endpoint.\n* `close()` - Closes the ZeroMQ socket.\n\nFull example:\n\n    var zerorpc = require(\"zerorpc\");\n\n    var server = new zerorpc.Server({\n        addMan: function(sentence, reply) {\n            reply(null, sentence + \", man!\");\n        },\n\n        add42: function(n, reply) {\n            reply(null, n + 42);\n        },\n\n        iter: function(from, to, step, reply) {\n            for(i=from; i<to; i+=step) {\n                reply(null, i, true);\n            }\n\n            reply();\n        }\n    });\n\n    server.bind(\"tcp://0.0.0.0:4242\");\n\n    server.on(\"error\", function(error) {\n        console.error(\"RPC server error:\", error);\n    });\n\nClients\n-------\n\nTo create a new client:\n\n    var zerorpc = require(\"zerorpc\");\n    var client = new zerorpc.Client(options);\n\nThe constructor optionally takes in an options object. Allowable options:\n\n* `timeout` (number) - Sets the number of seconds to wait for a response before considering the call timed out. Defaults to 30.\n\nEvents:\n\n* `error` - When an error occurs.\n\nMethods:\n\n* `bind(endpoint)` - Binds the client to the specified ZeroMQ endpoint.\n* `connect(endpoint)` - Connects the client to the specified ZeroMQ endpoint.\n* `close()` - Closes the ZeroMQ socket.\n* `invoke(method, arguments..., callback)` - Invokes a remote method.\n  * `method` is the method name.\n  * `callback` is a method to call when there is an update. This callback is called as `callback(error, response, more)`, where error is an error object, response is the new update, and more is a boolean specifying whether new updates will be available later (i.e. whether the response is streaming).\n\nFull example:\n\n    var zerorpc = require(\"zerorpc\");\n\n    var client = new zerorpc.Client();\n    client.connect(\"tcp://127.0.0.1:4242\");\n\n    client.on(\"error\", function(error) {\n        console.error(\"RPC client error:\", error);\n    });\n\n    client.invoke(\"iter\", 10, 20, 2, function(error, res, more) {\n        if(error) {\n            console.error(error);\n        } else {\n            console.log(\"UPDATE:\", res);\n        }\n\n        if(!more) {\n            console.log(\"Done.\");\n        }\n    });",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/dotcloud/zerorpc-node/issues"
  },
  "homepage": "https://github.com/dotcloud/zerorpc-node",
  "_id": "zerorpc@0.9.3",
  "dist": {
    "shasum": "91aa63fe9267adf38b149df83be72e69314622ef"
  },
  "_from": "zerorpc@",
  "_resolved": "https://registry.npmjs.org/zerorpc/-/zerorpc-0.9.3.tgz"
}
